// ==========================================================================
// Mixins Utilities
// ==========================================================================

// BEM selectors

@mixin e($element) {
  &__#{$element} {
    @content;
  }
}

@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}

// Generate modifier color classes
@mixin text-colors($map) {
  @each $theme, $color in $map {
    &--#{$theme} {
      color: $color;
    }
  }
}

@mixin bg-colors($map, $textcolor:null) {
  @each $theme, $color in $map {
    &--#{$theme} {
      background-color: $color;

      @if $textcolor != null {
        color: $textcolor;
      }
    }
  }
}

@mixin border-colors($map) {
  @each $theme, $color in $map {
    &--#{$theme} {
      border-color: $color;
    }
  }
}

@mixin bg-colors-hover($map, $hovercolor:transparent) {
  @each $theme, $color in $map {
    &--#{$theme}:hover {
      background-color: $hovercolor;
    }
  }
}

@mixin inverse-colors($map) {
  @each $theme, $color in $map {
    &--#{$theme} {
      color: $color;
      border: 1px solid $color;
      &:hover {
        //opacity: .75;
        color: $white;
        background: $color;
      }
      &:active {
        opacity: initial;
      }
    }
  }
}

@mixin themes($map){
  @each $theme, $color in $map {
    &--#{$theme} {
      color:$color;
      @content;
    }
  }
}

// Generating :before or :after pseudo-element shapes

@mixin p-el(
  $el,
  $el-w: null,
  $el-h: null) {
  @if $el == "before" or $el == "after" {
    position: relative;
    &:#{$el} {
      @extend %pseudos;
      width: $el-w;
      height: $el-h;
      @content;
    }
  } @else {
    @error "`#{$el}` is not a valid pseudo-element.";
  }
}

// Image replacement

@mixin img-replace($img, $w, $h, $disp: block) {
  background-image: url('#{$path--rel}/#{$img}');
  background-repeat: no-repeat;
  width: $w;
  height: $h;
  display: $disp;
}

// Adjacent sibling margins

@mixin doubly($margin: 1em) {
  & + & {
    margin-left: $margin;
    @content;
  }
}
